pipeline{
    agent any

    parameters {
        string(defaultValue: 'jenkins', description: 'numer tagu, bądź branch np. development', name: 'inventory_tag')
        string(defaultValue: 'master', description: 'numer tagu, bądź branch np. development', name: 'role_tag')
        choice(name: 'playbook', choices: ['reaport.yml', 'proxy_all.yml', 'proxy_nginx.yml', 'proxy_socat.yml'], description: 'Wybierz playbook')
        choice(name: 'limit', choices: ['cent_3', 'cent_2'], description: 'Wybierz serwer' )
        string(defaultValue: '--check', description: 'extra parameters np. --check, --list-hosts', name: 'extra')
    }

    environment {
        inventory = 'la-learning'
        role = 'reverseproxy'
    }

    options {
        timeout(time: 10, unit: 'MINUTES')
        disableConcurrentBuilds()
    }
    
    stages {
        stage('Checkout') {
            steps {
                script {
                    cleanWs()
                    
                    def workspace = pwd()
                    def repo_url = 'https://github.com/PlucinskiP/${inventory}.git'
                    sh "mkdir inventory"
                    dir ("${workspace}/inventory") {
                        checkout([$class: 'GitSCM', branches: [[name: '${inventory_tag}']], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'SubmoduleOption', disableSubmodules: false, parentCredentials: true, recursiveSubmodules: true, reference: '', trackingSubmodules: false]], submoduleCfg: [], userRemoteConfigs: [[url: "${repo_url}" ]]])

                    }
                    sh "mkdir playbook"
                    dir ("${workspace}/playbook") {
                        checkout([$class: 'GitSCM', branches: [[name: '${role_tag}']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: '0001', url: 'https://github.com/PlucinskiP/${role}.git']]])

                    }
                }
            }
        }
        
        stage('Execute Ansible') {
            steps {
                sh "ansiblePlaybook become: true, colorized: true, credentialsId: 'ansible_key', disableHostKeyChecking: true, extras: '${extra}', installation: 'ansible-2.9.14', inventory: 'inventory/inventory', limit: '${limit}', playbook: 'playbook/${playbook}'"
            }
        }

        stage('Copy reaport') {
            steps {
                sh 'printenv'
            }
        }
    }
    post {
        always {
            archiveArtifacts artifacts: '${workspace}/${inventory}/tmp/reaport.csv', fingerprint: true
        }
    }
}
